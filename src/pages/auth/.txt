// import React, {useState, useEffect} from 'react';
// import { useDispatch, useSelector } from 'react-redux';
// import {
//   Alert,
//   Avatar,
//   Box,
//   Button,
//   Container,
//   CssBaseline,
//   Grid,
//   TextField,
//   Typography,
//   Slide,
//   Snackbar,
//   CircularProgress,
//   useMediaQuery,
// } from '@mui/material';
// import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
// import { useFormik } from 'formik';
// import * as yup from 'yup';
// import { useTheme } from '@mui/material/styles';
// import { useNavigate, Link } from 'react-router-dom';

// const SlideTransition = (props) => <Slide {...props} direction="up" />;

// function SignInPage() {
//   const [snackbar, setSnackbar] = useState({
//     open: false,
//     message: "",
//     severity: "info",
//   });
//   const [loading, setLoading] = useState(false);

//   const navigate = useNavigate();
//   const theme = useTheme(); 
//   const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm")); 

//   const handleCloseSnackbar = () => setSnackbar((prev) => ({ ...prev, open: false }));

//   const validationSchema = yup.object({
//     email: yup
//       .string()
//       .email("Please enter a valid email address")
//       .required("Email address is required"),
//     password: yup
//       .string()
//       .min(8, "Password must be at least 8 characters long")
//       .required("Password is required"),
//   });

//   const authForm = useFormik({
//     initialValues: { email: "", password: "" },
//     validationSchema,
//     onSubmit: async (values) => {
//       setLoading(true);
//       try {
//         setSnackbar({
//           open: true,
//           message: "Login successful! Redirecting...",
//           severity: "success",
//         });
//         navigate("/home");
//       } catch (error) {
//         setSnackbar({
//           open: true,
//           message: error.response?.data?.message || "Invalid credentials. Please try again.",
//           severity: "error",
//         });
//       } finally {
//         setLoading(false);
//       }
//     },
//   });

//   // useEffect(() => {
//   //   if (user && user.isProfileComplete !== undefined) {
//   //     // Redirect based on whether the profile is complete or not
//   //     const redirectPath = user.isProfileComplete ? '/home' : '/profile-setup';
//   //     setTimeout(() => {
//   //       navigate(redirectPath);
//   //       authForm.resetForm(); // Reset form after successful login
//   //     }, 3000);
//   //   }
//   // }, [user, navigate, authForm]);

//   return (
//     <Container component="main" maxWidth="xs">
//       <CssBaseline />
//       <Box
//         width={isSmallScreen ? "100%" : 450}
//         sx={{
//           marginTop: 8,
//           display: "flex",
//           flexDirection: "column",
//           alignItems: "center",
//           padding: 3,
//           borderRadius: 2,
//           boxShadow: 3,
//           backgroundColor: theme.palette.background.paper,
//         }}
//       >
//         <Avatar sx={{ m: 1, bgcolor: theme.palette.primary.main }}>
//           <LockOutlinedIcon />
//         </Avatar>
//         <Typography component="h1" variant="h5">
//           Sign In
//         </Typography>
//         <Box component="form" onSubmit={authForm.handleSubmit} sx={{ mt: 1 }}>
//           <TextField
//             margin="normal"
//             fullWidth
//             id="email"
//             label="Email Address"
//             name="email"
//             value={authForm.values.email}
//             onChange={authForm.handleChange}
//             onBlur={authForm.handleBlur}
//             error={authForm.touched.email && Boolean(authForm.errors.email)}
//             helperText={authForm.touched.email && authForm.errors.email}
//           />
//           <TextField
//             margin="normal"
//             fullWidth
//             name="password"
//             label="Password"
//             type="password"
//             id="password"
//             value={authForm.values.password}
//             onChange={authForm.handleChange}
//             onBlur={authForm.handleBlur}
//             error={authForm.touched.password && Boolean(authForm.errors.password)}
//             helperText={authForm.touched.password && authForm.errors.password}
//           />
//           <Button
//             type="submit"
//             fullWidth
//             variant="contained"
//             color="primary"
//             sx={{ mt: 3, mb: 2 }}
//             disabled={loading}
//             startIcon={loading && <CircularProgress size="1rem" />}
//           >
//             {loading ? "Signing In..." : "Sign In"}
//           </Button>
//           <Grid container justifyContent="space-between">
//             <Grid item>
//               <Link to="/forgot-password" style={{ color: theme.palette.primary.main }}>
//                 Forgot password?
//               </Link>
//             </Grid>
//             <Grid item>
//               <Link to="/signup" style={{ color: theme.palette.primary.main }}>
//                 {"Don't have an account? Sign Up"}
//               </Link>
//             </Grid>
//           </Grid>
//         </Box>
//       </Box>
//       <Snackbar
//         open={snackbar.open}
//         onClose={handleCloseSnackbar}
//         TransitionComponent={SlideTransition}
//         autoHideDuration={6000}
//         anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
//       >
//         <Alert
//           onClose={handleCloseSnackbar}
//           severity={snackbar.severity}
//           variant="filled"
//           sx={{ width: "100%" }}
//         >
//           {snackbar.message}
//         </Alert>
//       </Snackbar>
//     </Container>
//   );
// }

// export default SignInPage;




  // const validationSchema = Yup.object().shape({
  //   workoutType: Yup.string().required("Workout type is required"),
  //   workoutName: Yup.lazy((value, context) => {
  //     console.log(context);
  //     return context.parent.workoutType === "other"?
  //     Yup.string().required("Workout name is required for 'Other' type")
  //     : Yup.string().required("Workout name is required");
  //   }),
  //   sets: Yup.lazy((value, context) => {
  //     if (context.parent.workoutType === "strength") {
  //       return Yup.number()
  //         .required("Sets are required for strength workouts")
  //         .positive("Sets must be a positive number")
  //         .integer("Sets must be an integer");
  //     }
  //     return Yup.number().nullable(); // No validation if not strength
  //   }),
  //   reps: Yup.lazy((value, context) => {
  //     if (context.parent.workoutType === "strength") {
  //       return Yup.number()
  //         .required("Reps are required for strength workouts")
  //         .positive("Reps must be a positive number")
  //         .integer("Reps must be an integer");
  //     }
  //     return Yup.number().nullable(); // No validation if not strength
  //   }),
  //   duration: Yup.lazy((value, context) => {
  //     if (context.parent.workoutType === "cardio") {
  //       return Yup.number()
  //         .required("Duration is required for cardio workouts")
  //         .positive("Duration must be a positive number");
  //     }
  //     return Yup.number().nullable(); // No validation if not cardio
  //   }),
  //   weightPerSet: Yup.lazy((value, context) => {
  //     if (context.parent.workoutType === "strength") {
  //       return Yup.number()
  //         .required("Weight per set is required for strength workouts")
  //         .positive("Weight must be a positive number");
  //     }
  //     return Yup.number().nullable(); // No validation if not strength
  //   }),
  //   caloriesBurned: Yup.number().nullable(), // Optional field for all
  // });